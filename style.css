:root {
  --bg: hsl(221, 37%, 10%);
  --button-text: hsl(200, 60%, 12%);
  --button-1-surface: hsl(197, 88%, 58%);
  --button-2-surface: hsl(41, 96%, 56%);
}

html {
  color-scheme: dark;
  font-family: system-ui;
  font-size: 2rem;
  background: var(--bg);
}
body {
  min-height: 80vh;
  display: flex;
  gap: 1rem;
  justify-content: center;
  place-items: center;
}

.glassy-button {
  cursor: pointer;
  font: inherit;
  color: var(--button-text);
  font-weight: 500;
  /*padding: 1rem 1.5rem;*/
  padding: 0;
  border: 0;
  border-radius: 1rem;
  background-color: transparent;
  /*background-color: coral;*/

  position: relative;

  span {
    /* Solution: keep the background-color to be transparent in the parent level and change it to coral in the span level so the stacking context will not effect the background color shift */
    background-color: coral;

    /* translate (translate: 0 -0.5rem; on the hover state) does not work for inline element. so need to switch span to be a block element */
    display: block;
    padding: 1rem 1.5rem;
    border-radius: inherit;
    transition: translate 200ms;
  }

  &::after {
    content: '';
    position: absolute;
    z-index: -1; /* so we can see the button text */
    inset: 0;
    border-radius: inherit;
    background-color: var(--_surface);
    transition: translate 200ms;
  }

  /* Move the top layer up and bottom layer down when it's on hover */
  &:hover,
  &:focus-visible {
    /* You will create a new stacking context when you add the translate, that is why when you hover, you will see the background for button suddenly behind the psuedo element even though you set
      background-color: coral;
      in the .glassy-button evel
     */
    /*translate: 0 -0.5rem;*/
    span {
      translate: 0 -0.5rem;
    }

    &::after {
      translate: 0 0.65rem;
    }
  }
}

.glassy-button:nth-of-type(1) {
  --_surface: var(--button-1-surface);
}

.glassy-button:nth-of-type(2) {
  --_surface: var(--button-2-surface);
}
