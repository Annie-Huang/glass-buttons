:root {
  --bg: hsl(221, 37%, 10%);
  --button-text: hsl(200, 60%, 12%);
  --button-1-surface: hsl(197, 88%, 58%);
  --button-2-surface: hsl(41, 96%, 56%);
}

html {
  color-scheme: dark;
  font-family: system-ui;
  font-size: 2rem;
  background: var(--bg);
}
body {
  min-height: 80vh;
  display: flex;
  gap: 1rem;
  justify-content: center;
  place-items: center;
}

.glassy-button {
  --_padding: 1rem 1.5rem;
  --_transition-speed: 200ms;

  --_hover-opacity: 0.4;
  --_pressed-opacity: 0.15;
  --_hover-blurriness: 5px;
  --_pressed-blurriness: 10px;

  --_frostiness: 0.3;

  --_hover-offset: 0.5rem;
  --_pressed-offset: 0.25rem;

  /* Don't do this unless you have a very obvious focus state on your item*/
  outline: 0;

  cursor: pointer;
  font: inherit;
  color: var(--button-text);
  font-weight: 500;
  /*padding: 1rem 1.5rem;*/
  padding: 0;
  border: 0;
  border-radius: 1rem;
  background-color: transparent;
  /*background-color: coral;*/

  position: relative;

  span {
    /* Solution: keep the background-color to be transparent in the parent level and change it to coral in the span level so the stacking context will not effect the background color shift */
    /*background-color: coral;*/
    background-color: hsl(0 0% 100% / 0);
    backdrop-filter: blur(0px);

    /* translate (translate: 0 -0.5rem; on the hover state) does not work for inline element. so need to switch span to be a block element */
    display: block;
    overflow: hidden;
    padding: var(--_padding);
    border-radius: inherit;
    transition: background-color var(--_transition-speed),
      backdrop-filter var(--_transition-speed),
      translate var(--_transition-speed);

    /* If you ever have a background image and you need to play with the opacity, this is how you will do it. */
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      z-index: -1;
      background-image: url("data:image/svg+xml, %3C!-- svg: first layer --%3E%3Csvg viewBox='0 0 171 171' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='3.74' numOctaves='2' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");

      /* This is to create the glassier effect （磨砂）*/
      opacity: 0;
      transition: opacity var(--_transition-speed);
    }
  }

  &::after {
    content: '';
    position: absolute;
    z-index: -1; /* so we can see the button text */
    inset: 0;
    border-radius: inherit;
    background-color: var(--_surface);
    transition: scale var(--_transition-speed),
      translate var(--_transition-speed);
  }

  /* Move the top layer up and bottom layer down when it's on hover */
  &:hover,
  &:focus-visible {
    /* You will create a new stacking context when you add the translate, that is why when you hover, you will see the background for button suddenly behind the psuedo element even though you set
      background-color: coral;
      in the .glassy-button level
     */
    /*translate: 0 -0.5rem;*/
    span {
      /* I am so surprised Kevin can spot the different on the outline when the <button> is in focus-visible state.... */
      outline: 1px solid hsl(0 0% 100% / 0.7);

      translate: 0 calc(var(--_hover-offset) * -1);
      background-color: hsl(0 0% 100% / var(--_hover-opacity));
      backdrop-filter: blur(var(--_hover-blurriness));

      /* glassier effect （磨砂）*/
      &::before {
        opacity: var(--_frostiness);
      }
    }

    &::after {
      scale: 0.95; /* so it looks like pulling away from the 1st tier */
      translate: 0 0.125rem;

      /* Test the movement and it worked */
      transform: translate(var(--_x-motion), var(--_y-motion));
    }
  }

  &:active {
    span {
      translate: 0 calc(var(--_pressed-offset) * -1);
      background-color: hsl(0 0% 100% / var(--_pressed-opacity));
      backdrop-filter: blur(var(--_pressed-blurriness));
    }

    &::after {
      scale: 0.875;
      translate: 0 0.125rem;
    }
  }
}

.glassy-button:nth-of-type(1) {
  --_surface: var(--button-1-surface);
}

.glassy-button:nth-of-type(2) {
  --_surface: var(--button-2-surface);
}
